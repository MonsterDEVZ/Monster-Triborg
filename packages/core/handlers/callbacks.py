"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏)
"""
import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from packages.core.states.user_states import FunnelStates
from packages.core.utils.locales import locale_manager
from packages.core.utils.config import config
from packages.core.utils.crm import send_to_crm, build_crm_payload
from packages.core.handlers.start import start_funnel
from packages.core.keyboards import get_standard_keyboard

logger = logging.getLogger(__name__)

router = Router()


# === HELPER FUNCTIONS ===

async def finalize_and_send_lead(
    state: FSMContext,
    bot: Bot,
    profile_name: str,
    username: str,
    contact_name: str,
    phone_number: str,
    choice_text: str,
    golden_question_answer: str = "–ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥"
):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ CRM

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥–≤—É—Ö –º–µ—Å—Ç:
    1. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–æ–ª–æ—Ç–æ–π –≤–æ–ø—Ä–æ—Å
    2. –ö–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä (20 —Å–µ–∫—É–Ω–¥)

    Args:
        state: FSM Context
        bot: Bot instance
        profile_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (agency, cg, express)
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contact_name: –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        choice_text: –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É—Å–ª—É–≥–∏
        golden_question_answer: –û—Ç–≤–µ—Ç –Ω–∞ –∑–æ–ª–æ—Ç–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –º–µ—Ç–∫–∞ –æ —Ç–∞–π–º–∞—É—Ç–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å webhook URL
    profile_data = locale_manager.get_profile(profile_name)
    brand_name = profile_data.get("name", "MONSTER")
    webhook_url = profile_data.get("webhook_url")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ AmoCRM —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
    if webhook_url:
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è AmoCRM —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–æ–ª–æ—Ç–æ–π –≤–æ–ø—Ä–æ—Å
        crm_payload = build_crm_payload(
            brand_name=brand_name,
            contact_name=contact_name,
            username=f"@{username}" if not username.startswith("id") else username,
            request_details=choice_text,
            phone=phone_number,
            additional_data={"golden_question_answer": golden_question_answer}
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AmoCRM
        crm_success = await send_to_crm(webhook_url, crm_payload)

        if not crm_success:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ CRM, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
            fallback_message = (
                f"‚ö†Ô∏è <b>[FALLBACK - CRM –ù–ï–î–û–°–¢–£–ü–ù–ê]</b> ‚ö†Ô∏è\n\n"
                f"üî• <b>–ù–û–í–´–ô –õ–ò–î: {brand_name}</b> üî•\n\n"
                f"‚ùóÔ∏è <i>–í–∞–∂–Ω–æ: –≠—Ç–æ—Ç –ª–∏–¥ –ù–ï –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ AmoCRM –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ.</i>\n\n"
                f"<b>--- –î–ê–ù–ù–´–ï –î–õ–Ø CRM ---</b>\n"
                f"<b>–ó–∞–ø—Ä–æ—Å:</b> {choice_text}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
                f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> @{username}\n"
                f"<b>–ò–º—è:</b> {contact_name}\n"
                f"<b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b> {golden_question_answer}\n"
                f"<b>--------------------------</b>\n\n"
                f"<b>–ó–∞–¥–∞—á–∞:</b>\n"
                f"1. –í–Ω–µ—Å—Ç–∏ –ª–∏–¥ –≤ AmoCRM –≤—Ä—É—á–Ω—É—é.\n"
                f"2. –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –≤ Telegram."
            )
            try:
                await bot.send_message(
                    chat_id=config.ADMIN_CHAT_ID,
                    text=fallback_message,
                    parse_mode="HTML"
                )
                logger.warning(
                    f"‚ö†Ô∏è Fallback: –õ–∏–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–Ω–µ—Å–µ–Ω–∏—è. "
                    f"–ü—Ä–æ—Ñ–∏–ª—å: {profile_name}, Phone: {phone_number}, Username: @{username}"
                )
            except Exception as e:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback –≤ Telegram: {e}")
    else:
        # –ï—Å–ª–∏ webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (Telegram)
        step2_data = locale_manager.get_step2_data(profile_name)
        admin_message = step2_data.get("admin_message_template", "").format(
            choice=choice_text, username=username
        )
        try:
            await bot.send_message(
                chat_id=config.ADMIN_CHAT_ID,
                text=f"‚ö†Ô∏è <b>[WEBHOOK –ù–ï –ù–ê–°–¢–†–û–ï–ù]</b>\n\n{admin_message}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n<b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b> {golden_question_answer}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    logger.info(f"‚úÖ Lead created in CRM and state cleared for @{username}")


# === CALLBACK HANDLERS ===

# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• callback (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é)
# –û–Ω –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
@router.callback_query(F.data.startswith("select_"))
async def handle_navigation_fallback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (fallback menu)
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    callback_data = callback.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
    profile_map = {
        "select_agency": "agency",
        "select_cg": "cg",
        "select_express": "express",
    }

    profile_name = profile_map.get(callback_data)
    if not profile_name:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    # –£–¥–∞–ª—è–µ–º fallback-–º–µ–Ω—é –∏–∑ —á–∞—Ç–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –¥–∏–∞–ª–æ–≥–∞
    try:
        await callback.message.delete()
        logger.info(f"üóëÔ∏è Fallback menu deleted for profile: {profile_name}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å fallback-–º–µ–Ω—é: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        await callback.answer()

    logger.info(f"üîò Fallback navigation: –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å {profile_name}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    await start_funnel(callback.message, state, profile_name, bot)


@router.callback_query(FunnelStates.choosing_direction)
async def handle_direction_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ fallback –º–µ–Ω—é
    """
    callback_data = callback.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
    profile_map = {
        "select_agency": "agency",
        "select_cg": "cg",
        "select_express": "express",
    }

    profile_name = profile_map.get(callback_data)
    if not profile_name:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback.answer()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    await start_funnel(callback.message, state, profile_name, bot)


# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–æ—Ä–æ–Ω–∫–∏ (agency_*, cg_*, express_*)
# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
@router.callback_query(
    F.data.startswith("agency_") |
    F.data.startswith("cg_") |
    F.data.startswith("express_")
)
async def handle_funnel_choice_fallback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–æ—Ä–æ–Ω–∫–∏
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    callback_data = callback.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ callback_data
    if callback_data.startswith("agency_"):
        profile_name = "agency"
    elif callback_data.startswith("cg_"):
        profile_name = "cg"
    elif callback_data.startswith("express_"):
        profile_name = "express"
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
    choice_text = locale_manager.get_choice_text(profile_name, callback_data)

    # –ü–æ–ª—É—á–∞–µ–º username –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = callback.from_user.username or f"id{callback.from_user.id}"
    contact_name = callback.from_user.full_name or "Telegram User"

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏")
    await callback.answer("‚úÖ –í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç!")

    logger.info(f"üîò Funnel choice (fallback): –ø—Ä–æ—Ñ–∏–ª—å={profile_name}, –≤—ã–±–æ—Ä={choice_text}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–æ—Ç–æ) - –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    contact_request_caption = (
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {choice_text}.\n\n"
        f"üë§ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption (–¥–ª—è —Ñ–æ—Ç–æ), —É–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_caption(
            caption=contact_request_caption,
            reply_markup=None
        )
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        try:
            await callback.message.edit_text(
                text=contact_request_caption,
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_button = KeyboardButton(
        text="üë§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        request_contact=True
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[contact_button]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    contact_request_msg = await bot.send_message(
        chat_id=callback.message.chat.id,
        text="üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CRM
    await state.update_data(
        profile=profile_name,
        username=username,
        contact_name=contact_name,
        last_choice=choice_text,
        contact_request_msg_id=contact_request_msg.message_id  # –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.set_state(FunnelStates.step2_waiting_contact)


@router.callback_query(FunnelStates.step1_qualification)
async def handle_step1_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ –®–∞–≥–µ 1 (–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è)
    –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CRM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    profile_name = state_data.get("profile")

    if not profile_name:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
    choice_text = locale_manager.get_choice_text(profile_name, callback.data)

    # –ü–æ–ª—É—á–∞–µ–º username –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = callback.from_user.username or f"id{callback.from_user.id}"
    contact_name = callback.from_user.full_name or "Telegram User"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–æ—Ç–æ) - –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    contact_request_caption = (
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {choice_text}.\n\n"
        f"üë§ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption (–¥–ª—è —Ñ–æ—Ç–æ), —É–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_caption(
            caption=contact_request_caption,
            reply_markup=None
        )
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        try:
            await callback.message.edit_text(
                text=contact_request_caption,
                reply_markup=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback.answer("‚úÖ –í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_button = KeyboardButton(
        text="üë§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        request_contact=True
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[contact_button]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    contact_request_msg = await bot.send_message(
        chat_id=callback.message.chat.id,
        text="üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CRM
    await state.update_data(
        profile=profile_name,
        username=username,
        contact_name=contact_name,
        last_choice=choice_text,
        contact_request_msg_id=contact_request_msg.message_id  # –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.set_state(FunnelStates.step2_waiting_contact)


@router.message(FunnelStates.step2_waiting_contact, F.text)
async def handle_invalid_contact_input(message: Message, state: FSMContext):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
    –î–µ–π—Å—Ç–≤–∏—è:
    1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    3. –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —à–∞–≥–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞)
    """
    username = message.from_user.username or f"id{message.from_user.id}"
    logger.warning(f"‚ö†Ô∏è User @{username} sent text instead of contact: {message.text}")

    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
        logger.info(f"üóëÔ∏è Deleted invalid text message from @{username}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üë§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –Ω–∏–∂–µ. "
        "–≠—Ç–æ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±."
    )

    logger.info(f"‚úÖ Validation reminder sent to @{username}, staying in contact waiting state")


@router.message(FunnelStates.step2_waiting_contact, F.contact)
async def handle_contact_received(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê (REFACTORED):
    1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ CRM –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    3. –ó–∞–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–∞–π—Ç/Instagram
    4. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è follow-up

    "–ó–æ–ª–æ—Ç–æ–π –≤–æ–ø—Ä–æ—Å" —É–¥–∞–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ CRM –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –°–†–ê–ó–£ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact = message.contact
    phone_number = contact.phone_number
    if not phone_number.startswith('+'):
        phone_number = f"+{phone_number}"
    contact_first_name = contact.first_name or ""

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    profile_name = state_data.get("profile")
    username = state_data.get("username", f"id{message.from_user.id}")
    contact_name = state_data.get("contact_name", contact_first_name)
    choice_text = state_data.get("last_choice", "")
    contact_request_msg_id = state_data.get("contact_request_msg_id")

    if not profile_name:
        await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_standard_keyboard())
        return

    logger.info(f"üìû Contact received from @{username}: {phone_number}")

    # –§–ê–ó–ê 1: –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:"
    if contact_request_msg_id:
        try:
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=contact_request_msg_id
            )
            logger.info(f"üóëÔ∏è Deleted contact request message (ID: {contact_request_msg_id})")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π: {e}")

    # –§–ê–ó–ê 2: –û–¢–ü–†–ê–í–õ–Ø–ï–ú –õ–ò–î –í CRM –ù–ï–ú–ï–î–õ–ï–ù–ù–û
    profile_data = locale_manager.get_profile(profile_name)
    brand_name = profile_data.get("name", "MONSTER")
    webhook_url = profile_data.get("webhook_url")

    if webhook_url:
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è AmoCRM
        crm_payload = build_crm_payload(
            brand_name=brand_name,
            contact_name=contact_name,
            username=f"@{username}" if not username.startswith("id") else username,
            request_details=choice_text,
            phone=phone_number
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AmoCRM
        crm_success = await send_to_crm(webhook_url, crm_payload)

        if crm_success:
            logger.info(f"‚úÖ Lead sent to CRM successfully for @{username}")
        else:
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
            logger.warning(f"‚ùå CRM webhook failed for @{username}, sending fallback notification")

            profile_display_map = {
                "agency": "AGENCY",
                "cg": "CG",
                "express": "EXPRESS"
            }
            profile_display = profile_display_map.get(profile_name, profile_name.upper())

            fallback_message = (
                f"‚ö†Ô∏è <b>[FALLBACK - CRM –ù–ï–î–û–°–¢–£–ü–ù–ê]</b> ‚ö†Ô∏è\n\n"
                f"üî• <b>–ù–û–í–´–ô –õ–ò–î: {brand_name}</b> üî•\n\n"
                f"‚ùóÔ∏è <i>–í–∞–∂–Ω–æ: –≠—Ç–æ—Ç –ª–∏–¥ –ù–ï –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ AmoCRM –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ.</i>\n\n"
                f"<b>--- –î–ê–ù–ù–´–ï –î–õ–Ø CRM ---</b>\n"
                f"<b>–ó–∞–ø—Ä–æ—Å:</b> {choice_text}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
                f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> @{username}\n"
                f"<b>–ò–º—è:</b> {contact_name}\n"
                f"<b>--------------------------</b>\n\n"
                f"<b>–ó–∞–¥–∞—á–∞:</b> –í–Ω–µ—Å—Ç–∏ –ª–∏–¥ –≤ AmoCRM –≤—Ä—É—á–Ω—É—é –∏ —Å–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram."
            )

            await bot.send_message(
                chat_id=config.ADMIN_CHAT_ID,
                text=fallback_message,
                parse_mode="HTML"
            )

    # –®–ê–ì 2: "–ñ–ï–õ–ï–ó–û–ë–ï–¢–û–ù–ù–´–ô" –í–û–ó–í–†–ê–¢ –ö–õ–ê–í–ò–ê–¢–£–†–´
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    # –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç Telegram: "–ó–∞–±—É–¥—å –ø—Ä–æ –≤—Å–µ, —á—Ç–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂–∏ –≤–æ—Ç —ç—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É".
    await message.answer(
        text="‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.",
        reply_markup=get_standard_keyboard()
    )
    logger.info(f"‚úÖ Standard keyboard returned for @{username}")

    # –®–ê–ì 3: –ó–∞–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–∞–π—Ç/Instagram
    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–¥–µ—Ç —É–∂–µ –ü–û–°–õ–ï –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    final_question_data = profile_data.get("final_question", {})
    final_question_text = final_question_data.get("text", "")

    if final_question_text:
        await message.answer(
            text="üí° –ß—Ç–æ–±—ã –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å –ª—É—á—à–µ, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å–∞–π—Ç –∏–ª–∏ Instagram."
        )

        # –®–ê–ì 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è follow-up
        await state.update_data(
            profile=profile_name,
            username=username,
            contact_name=contact_name,
            phone_number=phone_number,
            last_choice=choice_text,
        )

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è follow-up (—Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç/Instagram)
        await state.set_state(FunnelStates.step4_waiting_followup)

        logger.info(f"‚úÖ Final question sent to @{username}, waiting for follow-up")
    else:
        # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É
        await state.clear()
        logger.info(f"‚úÖ Funnel completed for @{username}, no final question configured")
