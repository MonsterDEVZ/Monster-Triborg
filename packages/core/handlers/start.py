"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å Deep Linking
"""
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from packages.core.states.user_states import FunnelStates
from packages.core.utils.locales import locale_manager
from packages.core.keyboards import get_standard_keyboard

router = Router()


@router.message(CommandStart(deep_link=True))
async def handle_deeplink_start(
    message: Message, command: CommandObject, state: FSMContext, bot: Bot
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (Deep Linking)
    –ü—Ä–∏–º–µ—Ä—ã: /start agency, /start cg, /start express
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º payload –∏–∑ deep link
    payload = command.args

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π
    valid_profiles = ["agency", "cg", "express"]
    if payload not in valid_profiles:
        # –ï—Å–ª–∏ payload –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
        await show_fallback_menu(message, state)
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    await start_funnel(message, state, payload, bot)


@router.message(CommandStart(deep_link=False))
async def handle_plain_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (Fallback —Å—Ü–µ–Ω–∞—Ä–∏–π)
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await show_fallback_menu(message, state)


async def show_fallback_menu(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (fallback)
    """
    fallback_data = locale_manager.get_fallback()

    # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons = []
    for button_data in fallback_data.get("buttons", []):
        buttons.append(
            [
                InlineKeyboardButton(
                    text=button_data["text"], callback_data=button_data["callback_data"]
                )
            ]
        )

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º welcome text –∏ "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:" –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    combined_text = f"{fallback_data.get('welcome_text', '')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"

    # –§–ê–ó–ê 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –°–û –°–¢–ê–ù–î–ê–†–¢–ù–û–ô REPLY-–ö–õ–ê–í–ò–ê–¢–£–†–û–ô
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ [–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é] –∏ [–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º]
    # –ø–æ—è–≤—è—Ç—Å—è —Å —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    await message.answer(
        combined_text,
        reply_markup=get_standard_keyboard()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer(
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=inline_keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await state.set_state(FunnelStates.choosing_direction)


async def start_funnel(message: Message, state: FSMContext, profile_name: str, bot: Bot):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–®–∞–≥ 1)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM Context
        profile_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (agency, cg, express)
        bot: Bot instance
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –®–∞–≥–∞ 1
    step1_data = locale_manager.get_step1_data(profile_name)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫
    buttons = []
    for button_data in step1_data.get("buttons", []):
        buttons.append(
            [
                InlineKeyboardButton(
                    text=button_data["text"], callback_data=button_data["callback_data"]
                )
            ]
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    photo_url = step1_data.get("photo_url")
    caption = step1_data.get("caption", "")

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    try:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo_url,
            caption=caption,
            reply_markup=keyboard,  # Inline-–∫–Ω–æ–ø–∫–∏
        )
    except Exception as e:
        # Fallback: –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            text=caption,
            reply_markup=keyboard,  # Inline-–∫–Ω–æ–ø–∫–∏
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(profile=profile_name, last_message_id=message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –®–∞–≥–∞ 1
    await state.set_state(FunnelStates.step1_qualification)
