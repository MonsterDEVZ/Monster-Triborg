"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –º–∏–Ω—É—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–æ—Ä–æ–Ω–∫—É
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from packages.core.keyboards import get_contact_request_keyboard, get_standard_keyboard
from packages.core.states.user_states import FunnelStates
from packages.core.utils.config import config

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üßë‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def handle_manager_contact_request(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏
    """
    username = message.from_user.username or "unknown"
    logger.info(f"üßë‚Äçüíª User @{username} requested direct manager contact")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    await state.update_data(
        direct_manager_contact=True,
        username=username
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    await state.set_state(FunnelStates.manager_contact_waiting)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–ü–æ–Ω–∏–º–∞—é! –ß—Ç–æ–±—ã —è –º–æ–≥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤–∞—Å —Å –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
        reply_markup=get_contact_request_keyboard()
    )

    logger.info(f"‚úÖ Contact request sent to @{username} for manager contact scenario")


@router.message(FunnelStates.manager_contact_waiting, F.contact)
async def handle_manager_contact_received(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    username = state_data.get("username", message.from_user.username or "unknown")
    contact_name = message.from_user.full_name or "Telegram User"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    phone_number = message.contact.phone_number
    if not phone_number.startswith('+'):
        phone_number = f"+{phone_number}"

    logger.info(f"üìû Manager contact received from @{username}: {phone_number}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    profile_name = state_data.get("profile", "–ù–ï –£–ö–ê–ó–ê–ù")
    profile_display_map = {
        "agency": "AGENCY",
        "cg": "CG",
        "express": "EXPRESS",
        "–ù–ï –£–ö–ê–ó–ê–ù": "–ù–ï –£–ö–ê–ó–ê–ù"
    }
    profile_display = profile_display_map.get(profile_name, profile_name.upper())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Å—Ç–æ–µ –¥–µ–ª–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    urgent_notification = (
        f"<b>–°—Ä–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å</b>\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{username}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"–ò–º—è: {contact_name}\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å: {profile_display}\n\n"
        f"–ó–∞–¥–∞—á–∞: –ö–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç –∑–≤–æ–Ω–∫–∞/—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    try:
        await bot.send_message(
            chat_id=config.ADMIN_CHAT_ID,
            text=urgent_notification,
            parse_mode="HTML"
        )
        logger.info(f"‚úÖ Urgent manager contact notification sent to admin for @{username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}", exc_info=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram "
        "–∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç.",
        reply_markup=get_standard_keyboard()
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    logger.info(f"‚úÖ Manager contact scenario completed for @{username}, state cleared")


@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu_button(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç /start)
    """
    username = message.from_user.username or "unknown"
    logger.info(f"üè† User @{username} requested main menu via Reply button")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
    from packages.core.handlers.start import handle_plain_start

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    await handle_plain_start(message, state)
