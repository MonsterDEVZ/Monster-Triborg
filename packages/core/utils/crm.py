"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AmoCRM —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏
"""
import asyncio
import logging
import aiohttp
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


async def send_to_crm(
    webhook_url: str, payload: Dict[str, Any], timeout: int = 10
) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ AmoCRM —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫

    Args:
        webhook_url: URL –≤–µ–±—Ö—É–∫–∞ AmoCRM
        payload: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)

    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    Example:
        >>> payload = {
        ...     "lead_name": "–ù–æ–≤—ã–π –ª–∏–¥ —Å Telegram: MONSTER AGENCY",
        ...     "contact": {
        ...         "name": "John Doe",
        ...         "username": "@johndoe"
        ...     },
        ...     "source": "Telegram Bot",
        ...     "request_details": "–ü—Ä–∏–≤–ª–µ—á—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
        ... }
        >>> success = await send_to_crm(webhook_url, payload)
    """
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ AmoCRM: {webhook_url}")
        logger.debug(f"üìã Payload: {payload}")

        async with aiohttp.ClientSession() as session:
            async with session.post(
                webhook_url,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=timeout),
                headers={"Content-Type": "application/json"},
            ) as response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status in (200, 201, 202):
                    response_text = await response.text()
                    logger.info(
                        f"‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ AmoCRM. –°—Ç–∞—Ç—É—Å: {response.status}"
                    )
                    logger.debug(f"üì• –û—Ç–≤–µ—Ç: {response_text}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AmoCRM. "
                        f"–°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {error_text}"
                    )
                    return False

    except aiohttp.ClientConnectorError as e:
        # CRM-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
        logger.error(
            f"‚ùå CRM-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è): {e}",
            exc_info=True
        )
        return False

    except aiohttp.ClientResponseError as e:
        # CRM –æ—Ç–≤–µ—Ç–∏–ª–∞ —Å –æ—à–∏–±–∫–æ–π (4xx, 5xx)
        logger.error(
            f"‚ùå CRM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É. –°—Ç–∞—Ç—É—Å: {e.status}, –°–æ–æ–±—â–µ–Ω–∏–µ: {e.message}",
            exc_info=True
        )
        return False

    except asyncio.TimeoutError:
        # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ AmoCRM (>{timeout}s)")
        return False

    except aiohttp.ClientError as e:
        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ aiohttp
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ HTTP-–∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ AmoCRM: {e}",
            exc_info=True
        )
        return False

    except Exception as e:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ AmoCRM: {e}",
            exc_info=True
        )
        return False


def build_crm_payload(
    brand_name: str,
    contact_name: str,
    username: str,
    request_details: str,
    phone: Optional[str] = None,
    additional_data: Optional[Dict[str, Any]] = None,
) -> Dict[str, Any]:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ payload –¥–ª—è AmoCRM

    Args:
        brand_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (MONSTER AGENCY, MONSTER CG, MONSTER EXPRESS)
        contact_name: –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ Telegram
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @)
        request_details: –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ (–≤—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è)
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        additional_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        Dict[str, Any]: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload –¥–ª—è AmoCRM
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    contact_data = {"name": contact_name, "username": username}

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if phone:
        contact_data["phone"] = phone

    payload = {
        "lead_name": f"–ù–æ–≤—ã–π –ª–∏–¥ —Å Telegram: {brand_name}",
        "contact": contact_data,
        "source": "Telegram Bot",
        "request_details": request_details,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if additional_data:
        payload.update(additional_data)

    return payload
